{"version":3,"file":"static/js/269.c42ba1f7.chunk.js","mappings":"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","sources":["app/modules/apps/user-management/users-list/components/header/UserListToolbar.tsx","app/modules/apps/user-management/users-list/components/header/UsersListGrouping.tsx","app/modules/apps/user-management/users-list/components/header/UsersListSearchComponent.tsx","app/modules/apps/user-management/users-list/components/header/UsersListHeader.tsx","app/modules/apps/user-management/users-list/table/columns/CustomHeaderColumn.tsx","app/modules/apps/user-management/users-list/table/columns/CustomRow.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserLastLoginCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserTwoStepsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserActionsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserCustomHeader.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionHeader.tsx","app/modules/apps/user-management/users-list/table/columns/_columns.tsx","app/modules/apps/user-management/users-list/components/loading/UsersListLoading.tsx","app/modules/apps/user-management/users-list/components/pagination/UsersListPagination.tsx","app/modules/apps/user-management/users-list/table/UsersTable.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalHeader.tsx","app/modules/apps/user-management/users-list/core/_models.ts","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalForm.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModal.tsx","app/modules/apps/user-management/users-list/UsersList.tsx","app/modules/apps/user-management/UsersPage.tsx"],"sourcesContent":["import {KTIcon} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      {/* begin::Export */}\r\n      <button type='button' className='btn btn-light-primary me-3'>\r\n        <KTIcon iconName='exit-up' className='fs-2' />\r\n        Export\r\n      </button>\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTIcon iconName='plus' className='fs-2' />\r\n        Add User\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useEffect, useState} from 'react'\r\nimport {initialQueryState, KTIcon, useDebounce} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTIcon iconName='magnifier' className='fs-1 position-absolute ms-6' />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search user'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","// @ts-nocheck\r\nimport {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","// @ts-nocheck\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => (\r\n  <div className='d-flex align-items-center'>\r\n    {/* begin:: Avatar */}\r\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n      <a href='#'>\r\n        {user.avatar ? (\r\n          <div className='symbol-label'>\r\n            <img src={toAbsoluteUrl(`/media/${user.avatar}`)} alt={user.name} className='w-100' />\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className={clsx(\r\n              'symbol-label fs-3',\r\n              `bg-light-${user.initials?.state}`,\r\n              `text-${user.initials?.state}`\r\n            )}\r\n          >\r\n            {user.initials?.label}\r\n          </div>\r\n        )}\r\n      </a>\r\n    </div>\r\n    <div className='d-flex flex-column'>\r\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n        {user.name}\r\n      </a>\r\n      <span>{user.email}</span>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  last_login?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({last_login}) => (\r\n  <div className='badge badge-light fw-bolder'>{last_login}</div>\r\n)\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  two_steps?: boolean\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({two_steps}) => (\r\n  <> {two_steps && <div className='badge badge-light-success fw-bolder'>Enabled</div>}</>\r\n)\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTIcon, QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        Actions\r\n        <KTIcon iconName='down' className='fs-5 m-0' />\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","// @ts-nocheck\r\nimport {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Name' className='min-w-125px' />,\r\n    id: 'name',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Role' className='min-w-125px' />,\r\n    accessor: 'role',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Last login' className='min-w-125px' />\r\n    ),\r\n    id: 'last_login',\r\n    Cell: ({...props}) => <UserLastLoginCell last_login={props.data[props.row.index].last_login} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Two steps' className='min-w-125px' />\r\n    ),\r\n    id: 'two_steps',\r\n    Cell: ({...props}) => <UserTwoStepsCell two_steps={props.data[props.row.index].two_steps} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Joined day' className='min-w-125px' />\r\n    ),\r\n    accessor: 'joined_day',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst mappedLabel = (label: string): string => {\r\n  if (label === '&laquo; Previous') {\r\n    return 'Previous'\r\n  }\r\n\r\n  if (label === 'Next &raquo;') {\r\n    return 'Next'\r\n  }\r\n\r\n  return label\r\n}\r\n\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links\r\n              ?.map((link) => {\r\n                return {...link, label: mappedLabel(link.label)}\r\n              })\r\n              .map((link) => (\r\n                <li\r\n                  key={link.label}\r\n                  className={clsx('page-item', {\r\n                    active: pagination.page === link.page,\r\n                    disabled: isLoading,\r\n                    previous: link.label === 'Previous',\r\n                    next: link.label === 'Next',\r\n                  })}\r\n                >\r\n                  <a\r\n                    className={clsx('page-link', {\r\n                      'page-text': link.label === 'Previous' || link.label === 'Next',\r\n                      'me-5': link.label === 'Previous',\r\n                    })}\r\n                    onClick={() => updatePage(link.page)}\r\n                    style={{cursor: 'pointer'}}\r\n                  >\r\n                    {mappedLabel(link.label)}\r\n                  </a>\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from '../table/columns/CustomHeaderColumn'\r\nimport {CustomRow} from '../table/columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTIcon} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add User</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTIcon iconName='cross' className='fs-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../../_metronic/helpers'\r\nexport type User = {\r\n  id?: ID\r\n  name?: string\r\n  avatar?: string\r\n  email?: string\r\n  position?: string\r\n  role?: string\r\n  last_login?: string\r\n  two_steps?: boolean\r\n  joined_day?: string\r\n  online?: boolean\r\n  initials?: {\r\n    label: string\r\n    state: string\r\n  }\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nexport const initialUser: User = {\r\n  avatar: 'avatars/300-6.jpg',\r\n  position: 'Art Director',\r\n  role: 'Administrator',\r\n  name: '',\r\n  email: '',\r\n}\r\n","import {FC, useState} from 'react'\r\nimport * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {initialUser, User} from '../core/_models'\r\nimport clsx from 'clsx'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser, updateUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  user: User\r\n}\r\n\r\nconst editUserSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email('Wrong email format')\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Email is required'),\r\n  name: Yup.string()\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Name is required'),\r\n})\r\n\r\nconst UserEditModalForm: FC<Props> = ({user, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n\r\n  const [userForEdit] = useState<User>({\r\n    ...user,\r\n    avatar: user.avatar || initialUser.avatar,\r\n    role: user.role || initialUser.role,\r\n    position: user.position || initialUser.position,\r\n    name: user.name || initialUser.name,\r\n    email: user.email || initialUser.email,\r\n  })\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const blankImg = toAbsoluteUrl('/media/svg/avatars/blank.svg')\r\n  const userAvatarImg = toAbsoluteUrl(`/media/${userForEdit.avatar}`)\r\n\r\n  const formik = useFormik({\r\n    initialValues: userForEdit,\r\n    validationSchema: editUserSchema,\r\n    onSubmit: async (values, {setSubmitting}) => {\r\n      setSubmitting(true)\r\n      try {\r\n        if (isNotEmpty(values.id)) {\r\n          await updateUser(values)\r\n        } else {\r\n          await createUser(values)\r\n        }\r\n      } catch (ex) {\r\n        console.error(ex)\r\n      } finally {\r\n        setSubmitting(true)\r\n        cancel(true)\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\r\n        {/* begin::Scroll */}\r\n        <div\r\n          className='d-flex flex-column scroll-y me-n7 pe-7'\r\n          id='kt_modal_add_user_scroll'\r\n          data-kt-scroll='true'\r\n          data-kt-scroll-activate='{default: false, lg: true}'\r\n          data-kt-scroll-max-height='auto'\r\n          data-kt-scroll-dependencies='#kt_modal_add_user_header'\r\n          data-kt-scroll-wrappers='#kt_modal_add_user_scroll'\r\n          data-kt-scroll-offset='300px'\r\n        >\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='d-block fw-bold fs-6 mb-5'>Avatar</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Image input */}\r\n            <div\r\n              className='image-input image-input-outline'\r\n              data-kt-image-input='true'\r\n              style={{backgroundImage: `url('${blankImg}')`}}\r\n            >\r\n              {/* begin::Preview existing avatar */}\r\n              <div\r\n                className='image-input-wrapper w-125px h-125px'\r\n                style={{backgroundImage: `url('${userAvatarImg}')`}}\r\n              ></div>\r\n              {/* end::Preview existing avatar */}\r\n\r\n              {/* begin::Label */}\r\n              {/* <label\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='change'\r\n              data-bs-toggle='tooltip'\r\n              title='Change avatar'\r\n            >\r\n              <i className='bi bi-pencil-fill fs-7'></i>\r\n\r\n              <input type='file' name='avatar' accept='.png, .jpg, .jpeg' />\r\n              <input type='hidden' name='avatar_remove' />\r\n            </label> */}\r\n              {/* end::Label */}\r\n\r\n              {/* begin::Cancel */}\r\n              {/* <span\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='cancel'\r\n              data-bs-toggle='tooltip'\r\n              title='Cancel avatar'\r\n            >\r\n              <i className='bi bi-x fs-2'></i>\r\n            </span> */}\r\n              {/* end::Cancel */}\r\n\r\n              {/* begin::Remove */}\r\n              {/* <span\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='remove'\r\n              data-bs-toggle='tooltip'\r\n              title='Remove avatar'\r\n            >\r\n              <i className='bi bi-x fs-2'></i>\r\n            </span> */}\r\n              {/* end::Remove */}\r\n            </div>\r\n            {/* end::Image input */}\r\n\r\n            {/* begin::Hint */}\r\n            {/* <div className='form-text'>Allowed file types: png, jpg, jpeg.</div> */}\r\n            {/* end::Hint */}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-2'>Full Name</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Input */}\r\n            <input\r\n              placeholder='Full name'\r\n              {...formik.getFieldProps('name')}\r\n              type='text'\r\n              name='name'\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.name && formik.errors.name},\r\n                {\r\n                  'is-valid': formik.touched.name && !formik.errors.name,\r\n                }\r\n              )}\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {formik.touched.name && formik.errors.name && (\r\n              <div className='fv-plugins-message-container'>\r\n                <div className='fv-help-block'>\r\n                  <span role='alert'>{formik.errors.name}</span>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {/* end::Input */}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-2'>Email</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Input */}\r\n            <input\r\n              placeholder='Email'\r\n              {...formik.getFieldProps('email')}\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.email && formik.errors.email},\r\n                {\r\n                  'is-valid': formik.touched.email && !formik.errors.email,\r\n                }\r\n              )}\r\n              type='email'\r\n              name='email'\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {/* end::Input */}\r\n            {formik.touched.email && formik.errors.email && (\r\n              <div className='fv-plugins-message-container'>\r\n                <span role='alert'>{formik.errors.email}</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-5'>Role</label>\r\n            {/* end::Label */}\r\n            {/* begin::Roles */}\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Administrator'\r\n                  id='kt_modal_update_role_option_0'\r\n                  checked={formik.values.role === 'Administrator'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_0'>\r\n                  <div className='fw-bolder text-gray-800'>Administrator</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for business owners and company administrators\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Developer'\r\n                  id='kt_modal_update_role_option_1'\r\n                  checked={formik.values.role === 'Developer'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_1'>\r\n                  <div className='fw-bolder text-gray-800'>Developer</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for developers or people primarily using the API\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Analyst'\r\n                  id='kt_modal_update_role_option_2'\r\n                  checked={formik.values.role === 'Analyst'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_2'>\r\n                  <div className='fw-bolder text-gray-800'>Analyst</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for people who need full access to analytics data, but don't need to update\r\n                    business settings\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Support'\r\n                  id='kt_modal_update_role_option_3'\r\n                  checked={formik.values.role === 'Support'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_3'>\r\n                  <div className='fw-bolder text-gray-800'>Support</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for employees who regularly refund payments and respond to disputes\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  id='kt_modal_update_role_option_4'\r\n                  value='Trial'\r\n                  checked={formik.values.role === 'Trial'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_4'>\r\n                  <div className='fw-bolder text-gray-800'>Trial</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for people who need to preview content data, but don't need to make any\r\n                    updates\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            {/* end::Roles */}\r\n          </div>\r\n          {/* end::Input group */}\r\n        </div>\r\n        {/* end::Scroll */}\r\n\r\n        {/* begin::Actions */}\r\n        <div className='text-center pt-15'>\r\n          <button\r\n            type='reset'\r\n            onClick={() => cancel()}\r\n            className='btn btn-light me-3'\r\n            data-kt-users-modal-action='cancel'\r\n            disabled={formik.isSubmitting || isUserLoading}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type='submit'\r\n            className='btn btn-primary'\r\n            data-kt-users-modal-action='submit'\r\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\r\n          >\r\n            <span className='indicator-label'>Submit</span>\r\n            {(formik.isSubmitting || isUserLoading) && (\r\n              <span className='indicator-progress'>\r\n                Please wait...{' '}\r\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n              </span>\r\n            )}\r\n          </button>\r\n        </div>\r\n        {/* end::Actions */}\r\n      </form>\r\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {\r\n    isLoading,\r\n    data: user,\r\n    error,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-650px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <UsersList />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersListWrapper}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../../_metronic/layout/core'\r\nimport {UsersListWrapper} from './users-list/UsersList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'User Management',\r\n    path: '/apps/user-management/users',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst UsersPage = () => {\r\n  return (\r\n    <Routes>\r\n      <Route element={<Outlet />}>\r\n        <Route\r\n          path='users'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Users list</PageTitle>\r\n              <UsersListWrapper />\r\n            </>\r\n          }\r\n        />\r\n      </Route>\r\n      <Route index element={<Navigate to='/apps/user-management/users' />} />\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default UsersPage\r\n"],"names":["UsersListToolbar","setItemIdForUpdate","useListView","className","UsersListFilter","type","iconName","onClick","UsersListGrouping","selected","clearSelected","queryClient","useQueryClient","query","useQueryResponse","deleteSelectedItems","useMutation","deleteSelectedUsers","onSuccess","invalidateQueries","QUERIES","length","mutateAsync","UsersListSearchComponent","updateState","useQueryRequest","useState","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","useEffect","undefined","search","initialQueryState","placeholder","value","onChange","e","target","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","map","cell","getCellProps","clsx","id","UserInfoCell","user","href","avatar","src","toAbsoluteUrl","alt","name","initials","state","label","email","UserLastLoginCell","last_login","UserTwoStepsCell","two_steps","UserActionsCell","MenuComponent","deleteItem","deleteUser","UserSelectionCell","onSelect","isSelected","useMemo","includes","checked","UserCustomHeader","title","tableProps","isSelectedForSorting","sort","order","style","cursor","UserSelectionHeader","isAllSelected","onSelectAll","usersColumns","props","Cell","data","index","accessor","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","mappedLabel","UsersListPagination","pagination","useQueryResponsePagination","isLoading","useQueryResponseLoading","links","link","active","page","disabled","previous","next","items_per_page","UsersTable","users","useQueryResponseData","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","i","colSpan","UserEditModalHeader","initialUser","editUserSchema","Yup","shape","min","max","required","UserEditModalForm","isUserLoading","refetch","role","userForEdit","cancel","withRefresh","blankImg","userAvatarImg","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","isNotEmpty","updateUser","createUser","console","error","handleSubmit","noValidate","backgroundImage","getFieldProps","touched","errors","autoComplete","isSubmitting","htmlFor","isValid","UserEditModalFormWrapper","itemIdForUpdate","enabledQuery","useQuery","getUserById","cacheTime","enabled","onError","err","UserEditModal","document","body","classList","add","remove","tabIndex","UsersList","UsersListWrapper","QueryRequestProvider","QueryResponseProvider","ListViewProvider","usersBreadcrumbs","path","isSeparator","isActive","element","breadcrumbs","to"],"sourceRoot":""}